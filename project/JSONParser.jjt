options {
    MULTI = true;
    VISITOR = true;
    UNICODE_INPUT=true;
}

PARSER_BEGIN(JSONParser)
import java.io.*;
import java.util.Set;
import java.util.HashSet;
import java.util.Stack;

class JSONParser
{
    protected static Stack<Set<String>> clavesDefinidas = new Stack<Set<String>>();

    public static void main(String[] args ) throws ParseException,Exception
    {
        try
        {
            JSONParser analizador = new JSONParser(System.in);
            analizador.Raiz().jjtAccept(new JSONToYAMLVisitor(), 0);
            //SimpleNode n = analizador.Raiz();
            //n.dump(">");
        }
        catch(ParseException e)
        {
            System.out.println(e.getMessage());
            System.out.println("Error al parsear");
        }

    }
}

class JSONToYAMLVisitor implements JSONParserVisitor {

    public Object visit(SimpleNode node, Object data) {
        return null;
    }
    public Object visit(ASTRoot node, Object data) {
        node.childrenAccept(this, data);
        return null;
    }
    public Object visit(ASTObject node, Object data) {
        int nivelAnidacion = (Integer) data + 1;
        if (nivelAnidacion > 1) System.out.print("\n");
        node.childrenAccept(this, nivelAnidacion);
        return null;
    }
    public Object visit(ASTEmptyObject node, Object data) {
		System.out.print("{}\n");
        node.childrenAccept(this, data);
        return null;
    }
    public Object visit(ASTMembers node, Object data) {
        int nivelAnidacion = (Integer) data;
        String prefijo = "";
        for(int i = 1; i < nivelAnidacion; i++) prefijo = prefijo + "    ";
        System.out.print(prefijo);
        node.childrenAccept(this, data);
        return null;
    }
    public Object visit(ASTPair node, Object data) {
        node.childrenAccept(this, data);
        return null;
    }
    public Object visit(ASTIDString node, Object data) {
        int nivelAnidacion = (Integer) data;
		String label = (String) node.jjtGetValue();
        if(nivelAnidacion <= 1 )label = label.substring(1, label.length()-1); //Le saco las comillas
        System.out.print(label+": ");
        node.childrenAccept(this, data);
        return null;
    }
    public Object visit(ASTArray node, Object data) {
        int nivelAnidacion = (Integer) data + 1;
        if (nivelAnidacion > 1) System.out.print("\n");
        node.childrenAccept(this, nivelAnidacion);
        return null;
    }
    public Object visit(ASTEmptyArray node, Object data) {
		System.out.print("[]\n");
        node.childrenAccept(this, data);
        return null;
    }
    public Object visit(ASTElements node, Object data) {
        int nivelAnidacion = (Integer) data;
        String prefijo = "";
        for(int i = 1; i < nivelAnidacion; i++) prefijo = prefijo + "    ";
        System.out.print(prefijo + "- ");
        node.childrenAccept(this, data);
        return null;
    }
    public Object visit(ASTValue node, Object data) {
        node.childrenAccept(this, data);
        return null;
    }
    public Object visit(ASTTValue node, Object data) {
		String label = (String) node.jjtGetValue();
        System.out.print(label+"\n");
        node.childrenAccept(this, data);
        return null;
    }
}

PARSER_END(JSONParser)

// Analisis lexico

// CARACTERES QUE NO SE TOMAN EN CUENTA
SKIP :
{
    //ESPACIOS EN BLANCO
    < WS : ([" ","\t"]) > |
    //SALTOS DE LINEA
    < NL : (["\n","\r","\f"])+ >
}


// TOKEN DE SIMBOLOS QUE SE USAN EN LA SINTAXIS
TOKEN :
{
    <LBRACE:"{"> |
    <RBRACE:"}"> |
    <LBRACKET:"["> |
    <RBRACKET:"]"> |
    <COMMA:","> |
    <DOTDOT:":"> |
    <QUOTE:"\"">

}

// TOKEN DE VALORES RESERVADOS "PRIMITIVOS"
TOKEN :
{
    <TRUE:"true"> |
    <FALSE:"false"> |
    <NULL:"null"> |

    //TODOS LOS UNICODE MENOS <QUOTE> 0022 Y <BARRA> 005C
    <#UNICODE: ["\u0000"-"\u0021", "\u0023"-"\u005b", "\u005d"-"\uffff"] > |
    <STRING: (<QUOTE>(<UNICODE>)*<QUOTE>) > |

    //NUMERO ENTERO | NUMERO CON DECIMALES
    <#NUM: (((["-","+"])? (["0"-"9"])+) | ((["-","+"])? (["0"-"9"])* "." (["0"-"9"])+)) > |
    //EXPONENTE 
    <#EXP: (["E","e"] (["-","+"])? (["0"-"9"])+) > |

    <NUMBER: <NUM>(<EXP>)?>
}

// Analisis Sintactico

ASTRoot Raiz() #Root :
{}
{
(LOOKAHEAD(2) Object()| LOOKAHEAD(2) Array() | EmptyObject() | EmptyArray())
{ return jjtThis; }
}

void Object() #Object :
{}
{
//Agregamos un conjunto de claves definidas para este objeto
{clavesDefinidas.push(new HashSet<String>());}
<LBRACE> Members() <RBRACE>
}

void EmptyObject() #EmptyObject :
{}
{
<LBRACE> <RBRACE>
}

void Members() #Members :
{}
{
Pair() (LOOKAHEAD(2) <COMMA> Members())*
}

void Pair() #Pair :
{}
{
(IDString() <DOTDOT> Value())
}

void IDString() #IDString :
{}
{
<STRING>
{ 
if (clavesDefinidas.peek().contains(token.image)) throw new ParseException("Clave " + token.image + " duplicada");
clavesDefinidas.peek().add(token.image);
jjtThis.jjtSetValue(token.image); 
}
}

void Array() #Array :
{}
{
<LBRACKET> Elements() <RBRACKET>
}

void EmptyArray() #EmptyArray :
{}
{
<LBRACKET> <RBRACKET>
}

void Elements() #Elements :
{}
{
Value() (LOOKAHEAD(2) <COMMA> Elements())*
}

void Value() #Value :
{}
{
(TValue() | LOOKAHEAD(2) Object()| LOOKAHEAD(2) Array() | EmptyObject() | EmptyArray())
}

void TValue() #TValue :
{}
{
(<STRING>|<NUMBER>|<FALSE>|<TRUE>|<NULL>)
{ jjtThis.jjtSetValue(token.image); }
}
