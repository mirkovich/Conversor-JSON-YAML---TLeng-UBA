options {
    MULTI = true;
    VISITOR = true;
}

PARSER_BEGIN(JSONParser)
import java.io.*;

class JSONParser
{
    public static void main(String[] args ) throws ParseException,Exception
    {
        try
        {
            JSONParser analizador = new JSONParser(System.in);
            SimpleNode n = analizador.Programa();
            n.dump(">");
        }
        catch(ParseException e)
        {
            System.out.println(e.getMessage());
        }
        System.out.println("Analizador ha terminado");
    }
}
PARSER_END(JSONParser)

// Analisis lexico

// TOKEN DE SIMBOLOS QUE SE USAN EN LA SINTAXIS
TOKEN :
{
  <ASIGNACION : "=">  // 1
  | <LBRACE:"{">      // 2
  | <RBRACE:"}">      // 3
  | <LBRACKET:"[">    // 4
  | <RBRACKET:"]">    // 5
  | <COMMA:",">       // 6
  | <DOTDOT:":">      // 7

}


// TOKEN DE VALORES RESERVADOS "PRIMITIVOS"
TOKEN :
{
  <TRUE:"true">       // 8
  |<FALSE:"false">    // 9
  |<NULL:"null">      // 10
}

// TOKEN DE SIMBOLOS QUE DENOTAN VALORES EN EL MUNDO JSON
TOKEN :
{
  <IDENTIFIER:["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>      // 11
  | <NUMBER: (["0"-"9"])+>                                            // 12
  | <DECIMAL: (["0"-"9"])+["."](["0"-"9"])+>                          // 13
  | <EXPONENCIAL: (["0"-"9"])+["."](["0"-"9"])+["e"](["0"-"9"])+>     // 14
}

// CARACTERES QUE NO SE TOMAN EN CUENTA
SKIP :
{
  " "|"\n"|"\r"|"\r\n"|"\t"
}

// Analisis Sintactico

// ALGO en JSON es :
// *  un objeto {clave:valor,clave2:valor2,.......}
// *  un array   [valor1,valor2,valor3,....]
ASTroot Programa() #root :
{
}
{
Object()|Array()
{ return jjtThis; }
}

void Object() #object :
{}
{
<LBRACE> ListaIdentificadorValor() <RBRACE>
}

void ListaIdentificadorValor() #listaIdVal :
{}
{
IdentificadorValor() (LOOKAHEAD(2) <COMMA> ListaIdentificadorValor())*
}

void IdentificadorValor() #idVal :
{}
{
<IDENTIFIER> <DOTDOT> Valor()
}

void Array() #array :
{}
{
<LBRACKET> ListaValor() <RBRACKET>
}

void ListaValor() #listaVal :
{}
{
Valor() (LOOKAHEAD(2) <COMMA> ListaValor())*
}

void Valor() #val :
{}
{
(<IDENTIFIER>|<NUMBER>|<DECIMAL>|<EXPONENCIAL>|<FALSE>|<TRUE>|<NULL>|Array()|Object())
}
