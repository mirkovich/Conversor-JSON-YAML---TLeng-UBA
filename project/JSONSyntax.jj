PARSER_BEGIN(JSONSyntax)
import java.io.*;

class JSONSyntax
{
    public static void main(String[] args ) throws ParseException,Exception
    {
      try
        {
          JSONSyntax analizador = new JSONSyntax(System.in);
          analizador.Programa();
          System.out.println("Analizador ha terminado");
        }
        catch(ParseException e)
        {
          System.out.println(e.getMessage());
          System.out.println("Analizador ha terminado");
        }
    }
}
PARSER_END(JSONSyntax)


// TOKEN DE SIMBOLOS QUE SE USAN EN LA SINTAXIS
TOKEN :
{
  <ASIGNACION : "=">  // 1
  | <LBRACE:"{">      // 2
  | <RBRACE:"}">      // 3
  | <LBRACKET:"[">    // 4
  | <RBRACKET:"]">    // 5
  | <COMMA:",">       // 6
  | <DOTDOT:":">      // 7

}


// TOKEN DE VALORES RESERVADOS "PRIMITIVOS"
TOKEN :
{
  <TRUE:"true">       // 8
  |<FALSE:"false">    // 9
  |<NULL:"null">      // 10
}

// TOKEN DE SIMBOLOS QUE DENOTAN VALORES EN EL MUNDO JSON
TOKEN :
{
  <IDENTIFIER:["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>      // 11
  | <NUMBER: (["0"-"9"])+>                                            // 12
  | <DECIMAL: (["0"-"9"])+["."](["0"-"9"])+>                          // 13
  | <EXPONENCIAL: (["0"-"9"])+["."](["0"-"9"])+["e"](["0"-"9"])+>     // 14
}

// CARACTERES QUE NO SE TOMAN EN CUENTA
SKIP :
{
  " "|"\n"|"\r"|"\r\n"|"\t"
}

// ALGO en JSON es :
// *  un objeto {clave:valor,clave2:valor2,.......}
// *  un array   [valor1,valor2,valor3,....]
void Programa() :
{
}
{
  Object()|Array()
}

// puede ser {} --- vacio ....pasa por que puedo poner un clave:valor o no.
// ya que uso *  en ambas partes la cabeza y la cola

// permito de un elemento
// {clave : valor o array} si es que no ejecuta EndObject
// llamo a la funcion EndObject()   En el caso que quiera mas elementos en objeto
// si pusimos o no un objeto puede ser llamado varias veces

void Object() :
{}
{
  //        {}    ó {clave:val} ó {clave:[Array]} ó {clave:[Array] EndObject()*}
<LBRACE>   ((<IDENTIFIER> <DOTDOT> ( Valores()|Array()|Object())) (EndObject())*) <RBRACE>
}


//{, clave: val} ... {,clave:[val1,val2,val3]} ... {,clave:{clave3:val,clave5:val}}
void EndObject() :
{}
{
<COMMA> (<IDENTIFIER><DOTDOT>( Valores()|Array()|Object() ))
}

void Array() :
{}
{
  // [] ó [val] ó [[val]] ó [val Tail()]
<LBRACKET>  ( (Valores()|Array()|Object())  (Tail())*) <RBRACKET>
}
// , val
void Tail() :
{}
{
<COMMA>  (Valores()| Array()|Object())
}

void Valores() :
{}
{
  (<IDENTIFIER>|<NUMBER>|<DECIMAL>|<EXPONENCIAL>|<FALSE>|<TRUE>|<NULL>)
}
